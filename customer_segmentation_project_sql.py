# -*- coding: utf-8 -*-
"""Customer-Segmentation-Project-SQL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12KuTr98WWYdHI02Fo7Tp7TL-50TrNjb8
"""

# Import necessary libraries
import pandas as pd
import sqlite3

# Upload the dataset to Colab
from google.colab import files
uploaded = files.upload()

# Read the dataset into a pandas DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database and write the DataFrame to it
conn = sqlite3.connect('hotel_reservations.db')
df.to_sql('reservations', conn, if_exists='replace', index=False)

# Create a cursor object to execute SQL queries
cur = conn.cursor()

"""1. What is the total number of reservations in the dataset?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT SUM(no_of_adults) AS total_adults, SUM(no_of_children) AS total_children FROM hotel_reservations;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""Hence, total 1316 + 69 = 1385 hotel reservations

**1 To count the confirmed and cancelled reservations of adults and children :
"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT booking_status, SUM(no_of_adults) AS total_adults, SUM(no_of_children) AS total_children FROM hotel_reservations GROUP BY booking_status;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""Hence, total cancelled reservations = 402 + 31 = 433 and total confirmed reservations = 914 + 38 = 952

2. Which meal plan is the most popular among guests?
"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT type_of_meal_plan, COUNT(Booking_ID) AS reservation_count FROM hotel_reservations GROUP BY type_of_meal_plan ORDER BY reservation_count DESC LIMIT 1;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""3. What is the average price per room for reservations involving children?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT round(AVG(avg_price_per_room)) AS avg_price FROM hotel_reservations WHERE no_of_children > 0;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""4. How many reservations were made for the year 2018 ?

"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT COUNT(Booking_ID) AS Total_Reservation_2018 FROM hotel_reservations WHERE arrival_date like '%2018%';")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""5. What is the most commonly booked room type?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT room_type_reserved, COUNT(Booking_ID) AS reservation_count FROM hotel_reservations GROUP BY room_type_reserved ORDER BY reservation_count DESC LIMIT 1;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""6. How many reservations fall on a weekend ?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT COUNT(no_of_weekend_nights) AS weekend_reservations FROM hotel_reservations WHERE no_of_weekend_nights > 0;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""7. What is the highest and lowest lead time for reservations?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT MAX(lead_time) AS max_lead_time, MIN(lead_time) AS min_lead_time FROM hotel_reservations;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""8. What is the most common market segment type for reservations?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT market_segment_type, COUNT(Booking_ID) AS reservation_count FROM hotel_reservations GROUP BY market_segment_type ORDER BY reservation_count DESC LIMIT 1;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""9. How many reservations have a booking status of "Confirmed"?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT COUNT(Booking_ID) AS confirmed_reservations FROM hotel_reservations WHERE booking_status = 'Not_Canceled';")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""10. What is the total number of adults and children across all reservations?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT SUM(no_of_adults) AS total_adults, SUM(no_of_children) AS total_children FROM hotel_reservations;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""11. What is the average number of weekend nights for reservations involving children?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT AVG(no_of_weekend_nights) AS avg_weekend_nights FROM hotel_reservations WHERE no_of_children > 0;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""12. How many reservations were made in each month of the year?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT arrival_date as month,COUNT(Booking_ID) as reservation_per_month FROM hotel_reservations group by arrival_date")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""13. What is the average number of nights (both weekend and weekday) spent by guests for each room type?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT room_type_reserved, round(AVG(no_of_weekend_nights + no_of_week_nights)) AS avg_total_nights FROM hotel_reservations GROUP BY room_type_reserved;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""14. For reservations involving children, what is the most common room type, and what is the average price for that room type?"""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("WITH child_reservations AS (SELECT room_type_reserved, avg_price_per_room FROM hotel_reservations WHERE no_of_children > 0) SELECT room_type_reserved, round(AVG(avg_price_per_room)) AS avg_price FROM child_reservations GROUP BY room_type_reserved ORDER BY COUNT(*) DESC LIMIT 1;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()

"""15. Find the market segment type that generates the highest average price per room."""

# Read the CSV file into a DataFrame
df = pd.read_csv('Hotel Reservation Dataset.csv')

# Create a SQLite database in memory
con = sqlite3.connect(':memory:')

# Write the DataFrame to the database
df.to_sql('hotel_reservations', con, if_exists='replace', index=False)

# Execute SQL queries on the database
cur = con.cursor()
cur.execute("SELECT market_segment_type, round(AVG(avg_price_per_room)) AS avg_price FROM hotel_reservations GROUP BY market_segment_type ORDER BY avg_price DESC LIMIT 1;")
rows = cur.fetchall()

# Print the results
for row in rows:
  print(row)

# Close the connection to the database
con.close()